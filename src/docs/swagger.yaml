basePath: /
definitions:
  dto.BoardCellEntity:
    properties:
      figureId:
        type: integer
      indexCell:
        type: integer
    type: object
  dto.CreateGameBody:
    properties:
      isWhite:
        type: boolean
    type: object
  dto.CreateGameResponse:
    properties:
      blackKingCastling:
        type: boolean
      blackRookACastling:
        type: boolean
      blackRookHCastling:
        type: boolean
      blackUserId:
        type: integer
      gameId:
        type: integer
      isCheckBlack:
        type: boolean
      isCheckWhite:
        type: boolean
      isEnded:
        type: boolean
      isStarted:
        type: boolean
      lastPawnMove:
        type: integer
      side:
        type: boolean
      whiteKingCastling:
        type: boolean
      whiteRookACastling:
        type: boolean
      whiteRookHCastling:
        type: boolean
      whiteUserId:
        type: integer
    type: object
  dto.CreateSessionRequest:
    properties:
      id:
        type: integer
      password:
        type: string
    type: object
  dto.CreateSessionResponse:
    properties:
      token:
        type: string
    type: object
  dto.CreateUserRequest:
    properties:
      password:
        type: string
      telegramId:
        type: integer
    type: object
  dto.CreateUserResponse:
    properties:
      id:
        type: integer
      password:
        type: string
    type: object
  dto.DoMoveBody:
    properties:
      from:
        type: string
      newFigure:
        type: integer
      to:
        type: string
    type: object
  dto.GetBoardResponse:
    properties:
      boardCells:
        items:
          $ref: '#/definitions/dto.BoardCellEntity'
        type: array
    type: object
  dto.GetGameRequest:
    properties:
      game_id:
        type: integer
    type: object
  dto.GetGameResponse:
    properties:
      black_king_castling:
        type: boolean
      black_rook_acastling:
        type: boolean
      black_rook_hcastling:
        type: boolean
      black_user_id:
        type: integer
      game_id:
        type: integer
      is_check_black:
        type: boolean
      is_check_white:
        type: boolean
      is_ended:
        type: boolean
      is_started:
        type: boolean
      last_loss:
        type: integer
      last_pawn_move:
        type: integer
      side:
        type: boolean
      white_king_castling:
        type: boolean
      white_rook_acastling:
        type: boolean
      white_rook_hcastling:
        type: boolean
      white_user_id:
        type: integer
    type: object
  dto.GetHistoryResponse:
    properties:
      moves:
        items:
          $ref: '#/definitions/models.Move'
        type: array
    type: object
  dto.TelegramSignInRequest:
    properties:
      chatId:
        type: integer
      telegramId:
        type: integer
    type: object
  dto.TelegramSignInResponse:
    properties:
      accountId:
        type: integer
      token:
        type: string
    type: object
  models.Game:
    properties:
      blackKingCastling:
        type: boolean
      blackRookACastling:
        type: boolean
      blackRookHCastling:
        type: boolean
      blackUserId:
        type: integer
      id:
        type: integer
      isCheckBlack:
        type: boolean
      isCheckWhite:
        type: boolean
      isEnded:
        type: boolean
      isStarted:
        type: boolean
      lastLoss:
        type: integer
      lastPawnMove:
        type: integer
      side:
        type: boolean
      whiteKingCastling:
        type: boolean
      whiteRookACastling:
        type: boolean
      whiteRookHCastling:
        type: boolean
      whiteUserId:
        type: integer
    type: object
  models.Move:
    properties:
      figureId:
        type: integer
      fromId:
        type: integer
      gameId:
        type: integer
      id:
        type: integer
      isCheckBlack:
        type: boolean
      isCheckWhite:
        type: boolean
      killedFigureId:
        type: integer
      moveNumber:
        type: integer
      newFigureId:
        type: integer
      toId:
        type: integer
    type: object
host: 127.0.0.1:8080
info:
  contact:
    email: support@swagger.io
    name: API Support
    url: http://www.swagger.io/support
  description: This is a sample server.
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  termsOfService: http://swagger.io/terms/
  title: Fiber Swagger Example API
  version: "2.0"
paths:
  /game/:
    get:
      consumes:
      - application/json
      description: get game.
      parameters:
      - description: request
        in: body
        name: game
        required: true
        schema:
          $ref: '#/definitions/dto.GetGameRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.GetGameResponse'
      security:
      - JWT: []
      summary: get game.
      tags:
      - game
    post:
      consumes:
      - application/json
      description: create new game.
      parameters:
      - description: request
        in: body
        name: game
        required: true
        schema:
          $ref: '#/definitions/dto.CreateGameBody'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.CreateGameResponse'
      security:
      - JWT: []
      summary: create new game.
      tags:
      - game
  /game/{gameId}/board:
    get:
      consumes:
      - application/json
      description: get board.
      parameters:
      - in: path
        name: gameId
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.GetBoardResponse'
      security:
      - JWT: []
      summary: get board.
      tags:
      - board
  /game/{gameId}/give-up:
    post:
      consumes:
      - application/json
      description: do give-up.
      parameters:
      - in: path
        name: gameId
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Game'
      security:
      - JWT: []
      summary: do give-up.
      tags:
      - give-up
  /game/{gameId}/history:
    get:
      consumes:
      - application/json
      description: get history.
      parameters:
      - in: path
        name: gameId
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.GetHistoryResponse'
      security:
      - JWT: []
      summary: get history.
      tags:
      - history
  /game/{gameId}/move:
    post:
      consumes:
      - application/json
      description: do move.
      parameters:
      - in: path
        name: gameId
        type: integer
      - description: move
        in: body
        name: move
        required: true
        schema:
          $ref: '#/definitions/dto.DoMoveBody'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Move'
      security:
      - JWT: []
      summary: do move.
      tags:
      - move
  /session/:
    post:
      consumes:
      - application/json
      description: create new session.
      parameters:
      - description: request
        in: body
        name: session
        required: true
        schema:
          $ref: '#/definitions/dto.CreateSessionRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.CreateSessionResponse'
      summary: create new session.
      tags:
      - session
  /user/:
    post:
      consumes:
      - application/json
      description: create new user.
      parameters:
      - description: request
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/dto.CreateUserRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.CreateUserResponse'
      summary: create new user.
      tags:
      - user
  /user/sign-in/telegram/:
    post:
      consumes:
      - application/json
      description: telegram sign-in.
      parameters:
      - description: request
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/dto.TelegramSignInRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.TelegramSignInResponse'
      summary: telegram sign-in.
      tags:
      - user
schemes:
- http
securityDefinitions:
  JWT:
    description: JWT security accessToken. Please add it in the format "Bearer {AccessToken}"
      to authorize your requests.
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
