basePath: /
definitions:
  dto.RequestPassword:
    properties:
      password:
        type: string
    type: object
  dto.RequestUserIdAndPassword:
    properties:
      id:
        type: integer
      password:
        type: string
    type: object
  github_com_IvaCheMih_chess_server_domains_game_dto.BoardCellEntity:
    properties:
      figureId:
        type: integer
      index:
        type: integer
    type: object
  github_com_IvaCheMih_chess_server_domains_game_dto.GetBoardResponse:
    properties:
      boardCells:
        items:
          $ref: '#/definitions/github_com_IvaCheMih_chess_server_domains_game_dto.BoardCellEntity'
        type: array
    type: object
  github_com_IvaCheMih_chess_server_domains_game_dto.RequestDoMove:
    properties:
      from:
        type: string
      to:
        type: string
    type: object
  github_com_IvaCheMih_chess_server_domains_game_dto.RequestedCreateGame:
    properties:
      isWhite:
        type: boolean
    type: object
host: localhost:8082
info:
  contact:
    email: support@swagger.io
    name: API Support
    url: http://www.swagger.io/support
  description: This is a sample server.
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  termsOfService: http://swagger.io/terms/
  title: Fiber Swagger Example API
  version: "2.0"
paths:
  /game/:
    post:
      consumes:
      - application/json
      description: create new game.
      parameters:
      - description: request
        in: body
        name: Body
        required: true
        schema:
          $ref: '#/definitions/github_com_IvaCheMih_chess_server_domains_game_dto.RequestedCreateGame'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties: true
            type: object
      security:
      - JWT: []
      summary: create new game.
      tags:
      - game
  /game/:gameId/history:
    get:
      consumes:
      - application/json
      description: get history.
      parameters:
      - description: gameId
        in: header
        name: gameId
        required: true
        type: string
      - description: userId
        in: header
        name: userId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties: true
            type: object
      security:
      - JWT: []
      summary: get history.
      tags:
      - history
  /game/:gameId/move:
    post:
      consumes:
      - application/json
      description: do move.
      parameters:
      - description: gameId
        in: header
        name: gameId
        required: true
        type: string
      - description: userId
        in: header
        name: userId
        required: true
        type: string
      - description: move
        in: body
        name: move
        required: true
        schema:
          $ref: '#/definitions/github_com_IvaCheMih_chess_server_domains_game_dto.RequestDoMove'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties: true
            type: object
      security:
      - JWT: []
      summary: do move.
      tags:
      - move
  /game/{gameId}/board:
    get:
      consumes:
      - application/json
      description: get board.
      parameters:
      - description: gameId
        in: path
        name: gameId
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/github_com_IvaCheMih_chess_server_domains_game_dto.GetBoardResponse'
      security:
      - JWT: []
      summary: get board.
      tags:
      - board
  /session/:
    post:
      consumes:
      - application/json
      description: create new session.
      parameters:
      - description: request
        in: body
        name: Body
        required: true
        schema:
          $ref: '#/definitions/dto.RequestUserIdAndPassword'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties: true
            type: object
      summary: create new session.
      tags:
      - session
  /user/:
    post:
      consumes:
      - application/json
      description: create new user.
      parameters:
      - description: request
        in: body
        name: Body
        required: true
        schema:
          $ref: '#/definitions/dto.RequestPassword'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties: true
            type: object
      summary: create new user.
      tags:
      - user
schemes:
- http
securityDefinitions:
  JWT:
    description: JWT security accessToken. Please add it in the format "Bearer {AccessToken}"
      to authorize your requests.
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
